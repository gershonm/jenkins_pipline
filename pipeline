pipeline {
    agent any
    environment {
        K8S_DEPLOYMENT_NAME = "your-kubernetes-deployment-name"
        K8S_NAMESPACE = "your-kubernetes-namespace"
        OUTPUT_FILE = 'deploy-python-app.txt' ????
    }
    parameters {
        string(name: 'DOCKER_HUB_CREDENTIALS_ID', defaultValue: "docker-hub")
        //string(name: 'DOCKER_HUB_CREDENTIALS_ID', defaultValue: "docker-hub", description: "the nexus credential saved in Jenkins ")
        string(name: 'DOCKER_FILE', defaultValue: "docker_file")
        string(name: 'DOCKER_IMAGE', defaultValue: "gershon-app:v1.0")
        string(name: 'DOCKER_REGISTRY', defaultValue: "stg-artifactory.xiv.ibm.com:5030")

    }
    options {
        timestamps()
        ansiColor('xterm')
    }
    stages {
        stage('Git Checkout gershon code'){
            steps {
	            git credentialsId: 'github', url: 'https://github.com/githubusername/githubreponame'
	            echo 'Git checkout completed'
	        }
	    }
        stage('Build Docker image') {
            steps {
                script {
                    sh 'docker build -f ${DOCKER_FILE} -t ${DOCKER_IMAGE}'
                }
                echo 'Build image Completed'
            }
        }
        stage('Push Docker image') {
            steps {
                script {
                    withCredentials([string(credentialsId: "${DOCKER_HUB_CREDENTIALS_ID}", variable: 'DOCKER_HUB_CREDENTIALS'), usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_HUB_CREDENTIALS_USR', passwordVariable: 'DOCKER_HUB_CREDENTIALS_PSW')]) {
                        sh "docker login -u ${env.DOCKER_HUB_CREDENTIALS_USR} -p ${env.DOCKER_HUB_CREDENTIALS_PSW}"
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def k8s_deployment_yaml = """
                        apiVersion: apps/v1
                        kind: Deployment
                        metadata:
                          name: ${K8S_DEPLOYMENT_NAME}
                          namespace: ${K8S_NAMESPACE}
                        spec:
                          replicas: 1
                          selector:
                            matchLabels:
                              app: ${K8S_DEPLOYMENT_NAME}
                          template:
                            metadata:
                              labels:
                                app: ${K8S_DEPLOYMENT_NAME}
                            spec:
                              containers:
                                - name: ${K8S_DEPLOYMENT_NAME}
                                  image: ${DOCKER_IMAGE}
                                  ports:
                                    - containerPort: 8080
                      """
                    sh "echo '${k8s_deployment_yaml}' | kubectl apply -f -"
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout ${DOCKER_REGISTRY}'
        }
        success {
            script {
                echo "finished successfully"
                if (fileExists("report/${OUTPUT_FILE}")) {
                    archiveArtifacts "report/${OUTPUT_FILE}"
                }
            }
        }
    }
}

